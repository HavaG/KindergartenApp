/**
 * Kindergarten API
 * This is the API for Kindergarten
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@kindergarten.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Child".equalsIgnoreCase(className)) {
      return new TypeToken<List<Child>>(){}.getType();
    }
    
    if ("Comment".equalsIgnoreCase(className)) {
      return new TypeToken<List<Comment>>(){}.getType();
    }
    
    if ("Group".equalsIgnoreCase(className)) {
      return new TypeToken<List<Group>>(){}.getType();
    }
    
    if ("GroupgroupIdcreatePostPath".equalsIgnoreCase(className)) {
      return new TypeToken<List<GroupgroupIdcreatePostPath>>(){}.getType();
    }
    
    if ("GroupgroupIdcreatePostPoll".equalsIgnoreCase(className)) {
      return new TypeToken<List<GroupgroupIdcreatePostPoll>>(){}.getType();
    }
    
    if ("Image".equalsIgnoreCase(className)) {
      return new TypeToken<List<Image>>(){}.getType();
    }
    
    if ("Like".equalsIgnoreCase(className)) {
      return new TypeToken<List<Like>>(){}.getType();
    }
    
    if ("Message".equalsIgnoreCase(className)) {
      return new TypeToken<List<Message>>(){}.getType();
    }
    
    if ("Note".equalsIgnoreCase(className)) {
      return new TypeToken<List<Note>>(){}.getType();
    }
    
    if ("Poll".equalsIgnoreCase(className)) {
      return new TypeToken<List<Poll>>(){}.getType();
    }
    
    if ("Post".equalsIgnoreCase(className)) {
      return new TypeToken<List<Post>>(){}.getType();
    }
    
    if ("Post1".equalsIgnoreCase(className)) {
      return new TypeToken<List<Post1>>(){}.getType();
    }
    
    if ("Presence".equalsIgnoreCase(className)) {
      return new TypeToken<List<Presence>>(){}.getType();
    }
    
    if ("Role".equalsIgnoreCase(className)) {
      return new TypeToken<List<Role>>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<List<User>>(){}.getType();
    }
    
    if ("Vote".equalsIgnoreCase(className)) {
      return new TypeToken<List<Vote>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Child".equalsIgnoreCase(className)) {
      return new TypeToken<Child>(){}.getType();
    }
    
    if ("Comment".equalsIgnoreCase(className)) {
      return new TypeToken<Comment>(){}.getType();
    }
    
    if ("Group".equalsIgnoreCase(className)) {
      return new TypeToken<Group>(){}.getType();
    }
    
    if ("GroupgroupIdcreatePostPath".equalsIgnoreCase(className)) {
      return new TypeToken<GroupgroupIdcreatePostPath>(){}.getType();
    }
    
    if ("GroupgroupIdcreatePostPoll".equalsIgnoreCase(className)) {
      return new TypeToken<GroupgroupIdcreatePostPoll>(){}.getType();
    }
    
    if ("Image".equalsIgnoreCase(className)) {
      return new TypeToken<Image>(){}.getType();
    }
    
    if ("Like".equalsIgnoreCase(className)) {
      return new TypeToken<Like>(){}.getType();
    }
    
    if ("Message".equalsIgnoreCase(className)) {
      return new TypeToken<Message>(){}.getType();
    }
    
    if ("Note".equalsIgnoreCase(className)) {
      return new TypeToken<Note>(){}.getType();
    }
    
    if ("Poll".equalsIgnoreCase(className)) {
      return new TypeToken<Poll>(){}.getType();
    }
    
    if ("Post".equalsIgnoreCase(className)) {
      return new TypeToken<Post>(){}.getType();
    }
    
    if ("Post1".equalsIgnoreCase(className)) {
      return new TypeToken<Post1>(){}.getType();
    }
    
    if ("Presence".equalsIgnoreCase(className)) {
      return new TypeToken<Presence>(){}.getType();
    }
    
    if ("Role".equalsIgnoreCase(className)) {
      return new TypeToken<Role>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<User>(){}.getType();
    }
    
    if ("Vote".equalsIgnoreCase(className)) {
      return new TypeToken<Vote>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
