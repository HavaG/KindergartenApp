/**
 * Kindergarten API
 * This is the API for Kindergarten
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.Child;
import io.swagger.client.model.Group;
import io.swagger.client.model.Message;
import io.swagger.client.model.Note;
import io.swagger.client.model.Post;
import io.swagger.client.model.Presence;
import io.swagger.client.model.User;
import io.swagger.client.model.Vote;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DefaultApi {
  String basePath = "https://virtserver.swaggerhub.com/KDT5/KDTBackend/1.0.0";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * adds a child
  * adds a child to the group
   * @param groupId The id of the group
   * @param childId The id of the child to add
   * @return void
  */
  public void addChild (Integer groupId, Integer childId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = childId;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling addChild",
        new ApiException(400, "Missing the required parameter 'groupId' when calling addChild"));
    }
    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling addChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling addChild"));
    }

    // create path and map variables
    String path = "/group/{groupId}/addChild".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * adds a child
   * adds a child to the group
   * @param groupId The id of the group   * @param childId The id of the child to add
  */
  public void addChild (Integer groupId, Integer childId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = childId;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling addChild",
        new ApiException(400, "Missing the required parameter 'groupId' when calling addChild"));
    }
    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling addChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling addChild"));
    }

    // create path and map variables
    String path = "/group/{groupId}/addChild".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * adds a note
  * adds a note to the child
   * @param childId The id of the child
   * @param noteId The Id of the note to add
   * @return void
  */
  public void addNote (Integer childId, Integer noteId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = noteId;
    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling addNote",
        new ApiException(400, "Missing the required parameter 'childId' when calling addNote"));
    }
    // verify the required parameter 'noteId' is set
    if (noteId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'noteId' when calling addNote",
        new ApiException(400, "Missing the required parameter 'noteId' when calling addNote"));
    }

    // create path and map variables
    String path = "/child/{childId}/addNote".replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * adds a note
   * adds a note to the child
   * @param childId The id of the child   * @param noteId The Id of the note to add
  */
  public void addNote (Integer childId, Integer noteId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = noteId;

    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling addNote",
        new ApiException(400, "Missing the required parameter 'childId' when calling addNote"));
    }
    // verify the required parameter 'noteId' is set
    if (noteId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'noteId' when calling addNote",
        new ApiException(400, "Missing the required parameter 'noteId' when calling addNote"));
    }

    // create path and map variables
    String path = "/child/{childId}/addNote".replaceAll("\\{format\\}","json").replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * adds a teacher
  * adds a teacher to the group
   * @param groupId The id of the group
   * @param teacherId The Id of the teacher to add
   * @return void
  */
  public void addTeacher (Integer groupId, Integer teacherId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = teacherId;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling addTeacher",
        new ApiException(400, "Missing the required parameter 'groupId' when calling addTeacher"));
    }
    // verify the required parameter 'teacherId' is set
    if (teacherId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'teacherId' when calling addTeacher",
        new ApiException(400, "Missing the required parameter 'teacherId' when calling addTeacher"));
    }

    // create path and map variables
    String path = "/group/{groupId}/addTeacher".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * adds a teacher
   * adds a teacher to the group
   * @param groupId The id of the group   * @param teacherId The Id of the teacher to add
  */
  public void addTeacher (Integer groupId, Integer teacherId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = teacherId;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling addTeacher",
        new ApiException(400, "Missing the required parameter 'groupId' when calling addTeacher"));
    }
    // verify the required parameter 'teacherId' is set
    if (teacherId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'teacherId' when calling addTeacher",
        new ApiException(400, "Missing the required parameter 'teacherId' when calling addTeacher"));
    }

    // create path and map variables
    String path = "/group/{groupId}/addTeacher".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * makes a comment
  * makes a comment on the post
   * @param groupId The id of the group
   * @param postId The id of the post
   * @param commentText The text of the comment
   * @return void
  */
  public void comment (Integer groupId, Integer postId, String commentText) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = commentText;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling comment",
        new ApiException(400, "Missing the required parameter 'groupId' when calling comment"));
    }
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling comment",
        new ApiException(400, "Missing the required parameter 'postId' when calling comment"));
    }
    // verify the required parameter 'commentText' is set
    if (commentText == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'commentText' when calling comment",
        new ApiException(400, "Missing the required parameter 'commentText' when calling comment"));
    }

    // create path and map variables
    String path = "/group/{groupId}/post/{postId}/comment".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * makes a comment
   * makes a comment on the post
   * @param groupId The id of the group   * @param postId The id of the post   * @param commentText The text of the comment
  */
  public void comment (Integer groupId, Integer postId, String commentText, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = commentText;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling comment",
        new ApiException(400, "Missing the required parameter 'groupId' when calling comment"));
    }
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling comment",
        new ApiException(400, "Missing the required parameter 'postId' when calling comment"));
    }
    // verify the required parameter 'commentText' is set
    if (commentText == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'commentText' when calling comment",
        new ApiException(400, "Missing the required parameter 'commentText' when calling comment"));
    }

    // create path and map variables
    String path = "/group/{groupId}/post/{postId}/comment".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * create a child
  * crete a child
   * @param child A child object to create
   * @return void
  */
  public void createChild (Child child) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = child;

    // create path and map variables
    String path = "/createChild";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * create a child
   * crete a child
   * @param child A child object to create
  */
  public void createChild (Child child, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = child;


    // create path and map variables
    String path = "/createChild".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * deletes the group
  * deletes the group
   * @param groupId The id of the group
   * @return void
  */
  public void deleteGroup (Integer groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling deleteGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling deleteGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}/deleteGroup".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * deletes the group
   * deletes the group
   * @param groupId The id of the group
  */
  public void deleteGroup (Integer groupId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling deleteGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling deleteGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}/deleteGroup".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * edits the post
  * edites the text of the post
   * @param groupId The id of the group
   * @param postId The id of the post
   * @param content The edited post
   * @return void
  */
  public void edit (Integer groupId, Integer postId, Post content) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = content;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling edit",
        new ApiException(400, "Missing the required parameter 'groupId' when calling edit"));
    }
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling edit",
        new ApiException(400, "Missing the required parameter 'postId' when calling edit"));
    }
    // verify the required parameter 'content' is set
    if (content == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'content' when calling edit",
        new ApiException(400, "Missing the required parameter 'content' when calling edit"));
    }

    // create path and map variables
    String path = "/group/{groupId}/post/{postId}/edit".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "applicatoin/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * edits the post
   * edites the text of the post
   * @param groupId The id of the group   * @param postId The id of the post   * @param content The edited post
  */
  public void edit (Integer groupId, Integer postId, Post content, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = content;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling edit",
        new ApiException(400, "Missing the required parameter 'groupId' when calling edit"));
    }
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling edit",
        new ApiException(400, "Missing the required parameter 'postId' when calling edit"));
    }
    // verify the required parameter 'content' is set
    if (content == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'content' when calling edit",
        new ApiException(400, "Missing the required parameter 'content' when calling edit"));
    }

    // create path and map variables
    String path = "/group/{groupId}/post/{postId}/edit".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "applicatoin/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * edit a child
  * edit a child
   * @param childId The id of the child
   * @param child The modified Child object
   * @return void
  */
  public void editChild (Integer childId, Child child) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = child;
    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling editChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling editChild"));
    }
    // verify the required parameter 'child' is set
    if (child == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'child' when calling editChild",
        new ApiException(400, "Missing the required parameter 'child' when calling editChild"));
    }

    // create path and map variables
    String path = "/child/{childId}/edit".replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * edit a child
   * edit a child
   * @param childId The id of the child   * @param child The modified Child object
  */
  public void editChild (Integer childId, Child child, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = child;

    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling editChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling editChild"));
    }
    // verify the required parameter 'child' is set
    if (child == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'child' when calling editChild",
        new ApiException(400, "Missing the required parameter 'child' when calling editChild"));
    }

    // create path and map variables
    String path = "/child/{childId}/edit".replaceAll("\\{format\\}","json").replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * edit a child&#39;s presence
  * edit a child&#39;s presence
   * @param childId The id of the child
   * @param presence The presence object.
   * @return void
  */
  public void editPresence (Integer childId, Presence presence) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = presence;
    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling editPresence",
        new ApiException(400, "Missing the required parameter 'childId' when calling editPresence"));
    }
    // verify the required parameter 'presence' is set
    if (presence == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'presence' when calling editPresence",
        new ApiException(400, "Missing the required parameter 'presence' when calling editPresence"));
    }

    // create path and map variables
    String path = "/child/{childId}/editPresence".replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * edit a child&#39;s presence
   * edit a child&#39;s presence
   * @param childId The id of the child   * @param presence The presence object.
  */
  public void editPresence (Integer childId, Presence presence, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = presence;

    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling editPresence",
        new ApiException(400, "Missing the required parameter 'childId' when calling editPresence"));
    }
    // verify the required parameter 'presence' is set
    if (presence == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'presence' when calling editPresence",
        new ApiException(400, "Missing the required parameter 'presence' when calling editPresence"));
    }

    // create path and map variables
    String path = "/child/{childId}/editPresence".replaceAll("\\{format\\}","json").replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a child
  * Gets a child
   * @param childId The id of the child
   * @return Child
  */
  public Child getChild (Integer childId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling getChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling getChild"));
    }

    // create path and map variables
    String path = "/child/{childId}".replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Child) ApiInvoker.deserialize(localVarResponse, "", Child.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a child
   * Gets a child
   * @param childId The id of the child
  */
  public void getChild (Integer childId, final Response.Listener<Child> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling getChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling getChild"));
    }

    // create path and map variables
    String path = "/child/{childId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Child) ApiInvoker.deserialize(localVarResponse,  "", Child.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets children
  * Gets a list of all the children of the group
   * @param groupId The id of the group
   * @return List<Child>
  */
  public List<Child> getChildren (Integer groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getChildren",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getChildren"));
    }

    // create path and map variables
    String path = "/group/{groupId}/getChildren".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Child>) ApiInvoker.deserialize(localVarResponse, "array", Child.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets children
   * Gets a list of all the children of the group
   * @param groupId The id of the group
  */
  public void getChildren (Integer groupId, final Response.Listener<List<Child>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getChildren",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getChildren"));
    }

    // create path and map variables
    String path = "/group/{groupId}/getChildren".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Child>) ApiInvoker.deserialize(localVarResponse,  "array", Child.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a group
  * Gets a group
   * @param groupId The id of the group
   * @return Group
  */
  public Group getGroup (Integer groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Group) ApiInvoker.deserialize(localVarResponse, "", Group.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a group
   * Gets a group
   * @param groupId The id of the group
  */
  public void getGroup (Integer groupId, final Response.Listener<Group> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Group) ApiInvoker.deserialize(localVarResponse,  "", Group.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * get messages
  * get messages from user
   * @param parentId The id of the parent
   * @return List<Message>
  */
  public List<Message> getMessage (Integer parentId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'parentId' is set
    if (parentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parentId' when calling getMessage",
        new ApiException(400, "Missing the required parameter 'parentId' when calling getMessage"));
    }

    // create path and map variables
    String path = "/user/{parentId}/getMessages".replaceAll("\\{" + "parentId" + "\\}", apiInvoker.escapeString(parentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Message>) ApiInvoker.deserialize(localVarResponse, "array", Message.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * get messages
   * get messages from user
   * @param parentId The id of the parent
  */
  public void getMessage (Integer parentId, final Response.Listener<List<Message>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'parentId' is set
    if (parentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parentId' when calling getMessage",
        new ApiException(400, "Missing the required parameter 'parentId' when calling getMessage"));
    }

    // create path and map variables
    String path = "/user/{parentId}/getMessages".replaceAll("\\{format\\}","json").replaceAll("\\{" + "parentId" + "\\}", apiInvoker.escapeString(parentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Message>) ApiInvoker.deserialize(localVarResponse,  "array", Message.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * get all notes
  * get all notes from a child
   * @param childId The id of the child
   * @return List<Note>
  */
  public List<Note> getNotes (Integer childId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling getNotes",
        new ApiException(400, "Missing the required parameter 'childId' when calling getNotes"));
    }

    // create path and map variables
    String path = "/child/{childId}/getNotes".replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Note>) ApiInvoker.deserialize(localVarResponse, "array", Note.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * get all notes
   * get all notes from a child
   * @param childId The id of the child
  */
  public void getNotes (Integer childId, final Response.Listener<List<Note>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling getNotes",
        new ApiException(400, "Missing the required parameter 'childId' when calling getNotes"));
    }

    // create path and map variables
    String path = "/child/{childId}/getNotes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Note>) ApiInvoker.deserialize(localVarResponse,  "array", Note.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a parent
  * Gets a parent by id
   * @param parentId The id of the parent
   * @return User
  */
  public User getParent (Integer parentId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'parentId' is set
    if (parentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parentId' when calling getParent",
        new ApiException(400, "Missing the required parameter 'parentId' when calling getParent"));
    }

    // create path and map variables
    String path = "/user/{parentId}".replaceAll("\\{" + "parentId" + "\\}", apiInvoker.escapeString(parentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (User) ApiInvoker.deserialize(localVarResponse, "", User.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a parent
   * Gets a parent by id
   * @param parentId The id of the parent
  */
  public void getParent (Integer parentId, final Response.Listener<User> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'parentId' is set
    if (parentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parentId' when calling getParent",
        new ApiException(400, "Missing the required parameter 'parentId' when calling getParent"));
    }

    // create path and map variables
    String path = "/user/{parentId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "parentId" + "\\}", apiInvoker.escapeString(parentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((User) ApiInvoker.deserialize(localVarResponse,  "", User.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets parents
  * Gets a list of all the parents of children in the group
   * @param groupId The id of the group
   * @return List<User>
  */
  public List<User> getParents (Integer groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getParents",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getParents"));
    }

    // create path and map variables
    String path = "/group/{groupId}/getParents".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<User>) ApiInvoker.deserialize(localVarResponse, "array", User.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets parents
   * Gets a list of all the parents of children in the group
   * @param groupId The id of the group
  */
  public void getParents (Integer groupId, final Response.Listener<List<User>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getParents",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getParents"));
    }

    // create path and map variables
    String path = "/group/{groupId}/getParents".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<User>) ApiInvoker.deserialize(localVarResponse,  "array", User.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a post
  * Gets a post of the group
   * @param groupId The id of the group
   * @param postId The id of the post
   * @return Post
  */
  public Post getPost (Integer groupId, Integer postId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getPost",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getPost"));
    }
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling getPost",
        new ApiException(400, "Missing the required parameter 'postId' when calling getPost"));
    }

    // create path and map variables
    String path = "/group/{groupId}/post/{postId}".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Post) ApiInvoker.deserialize(localVarResponse, "", Post.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a post
   * Gets a post of the group
   * @param groupId The id of the group   * @param postId The id of the post
  */
  public void getPost (Integer groupId, Integer postId, final Response.Listener<Post> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getPost",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getPost"));
    }
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling getPost",
        new ApiException(400, "Missing the required parameter 'postId' when calling getPost"));
    }

    // create path and map variables
    String path = "/group/{groupId}/post/{postId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Post) ApiInvoker.deserialize(localVarResponse,  "", Post.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets posts
  * Gets a list of all the posts of the group
   * @param groupId The id of the group
   * @return List<Post>
  */
  public List<Post> getPosts (Integer groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getPosts",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getPosts"));
    }

    // create path and map variables
    String path = "/group/{groupId}/getPosts".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Post>) ApiInvoker.deserialize(localVarResponse, "array", Post.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets posts
   * Gets a list of all the posts of the group
   * @param groupId The id of the group
  */
  public void getPosts (Integer groupId, final Response.Listener<List<Post>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getPosts",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getPosts"));
    }

    // create path and map variables
    String path = "/group/{groupId}/getPosts".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Post>) ApiInvoker.deserialize(localVarResponse,  "array", Post.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets teachers
  * Gets a list of all the teachers of the group
   * @param groupId The id of the group
   * @return List<User>
  */
  public List<User> getTeachers (Integer groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getTeachers",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getTeachers"));
    }

    // create path and map variables
    String path = "/group/{groupId}/getTeachers".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<User>) ApiInvoker.deserialize(localVarResponse, "array", User.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets teachers
   * Gets a list of all the teachers of the group
   * @param groupId The id of the group
  */
  public void getTeachers (Integer groupId, final Response.Listener<List<User>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getTeachers",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getTeachers"));
    }

    // create path and map variables
    String path = "/group/{groupId}/getTeachers".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<User>) ApiInvoker.deserialize(localVarResponse,  "array", User.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets users
  * Gets a list of all the teachers and parents of the group
   * @param groupId The id of the group
   * @return List<User>
  */
  public List<User> getUsers (Integer groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getUsers",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getUsers"));
    }

    // create path and map variables
    String path = "/group/{groupId}/getUsers".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<User>) ApiInvoker.deserialize(localVarResponse, "array", User.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets users
   * Gets a list of all the teachers and parents of the group
   * @param groupId The id of the group
  */
  public void getUsers (Integer groupId, final Response.Listener<List<User>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getUsers",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getUsers"));
    }

    // create path and map variables
    String path = "/group/{groupId}/getUsers".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<User>) ApiInvoker.deserialize(localVarResponse,  "array", User.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * makes a like
  * makes or removes a like on the post
   * @param groupId The id of the group
   * @param postId The id of the post
   * @return void
  */
  public void like (Integer groupId, Integer postId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling like",
        new ApiException(400, "Missing the required parameter 'groupId' when calling like"));
    }
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling like",
        new ApiException(400, "Missing the required parameter 'postId' when calling like"));
    }

    // create path and map variables
    String path = "/group/{groupId}/post/{postId}/like".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * makes a like
   * makes or removes a like on the post
   * @param groupId The id of the group   * @param postId The id of the post
  */
  public void like (Integer groupId, Integer postId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling like",
        new ApiException(400, "Missing the required parameter 'groupId' when calling like"));
    }
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling like",
        new ApiException(400, "Missing the required parameter 'postId' when calling like"));
    }

    // create path and map variables
    String path = "/group/{groupId}/post/{postId}/like".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * removes a child
  * removes a child from the group
   * @param groupId The id of the group
   * @param child The id of the child to remove from the gorup
   * @return void
  */
  public void removeChild (Integer groupId, Integer child) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = child;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling removeChild",
        new ApiException(400, "Missing the required parameter 'groupId' when calling removeChild"));
    }

    // create path and map variables
    String path = "/group/{groupId}/removeChild".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * removes a child
   * removes a child from the group
   * @param groupId The id of the group   * @param child The id of the child to remove from the gorup
  */
  public void removeChild (Integer groupId, Integer child, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = child;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling removeChild",
        new ApiException(400, "Missing the required parameter 'groupId' when calling removeChild"));
    }

    // create path and map variables
    String path = "/group/{groupId}/removeChild".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * removes a teacher
  * removes a teacher from the group
   * @param groupId The id of the group
   * @param teacher The id of the teacher to remove
   * @return void
  */
  public void removeTeacher (Integer groupId, Integer teacher) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = teacher;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling removeTeacher",
        new ApiException(400, "Missing the required parameter 'groupId' when calling removeTeacher"));
    }

    // create path and map variables
    String path = "/group/{groupId}/removeTeacher".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * removes a teacher
   * removes a teacher from the group
   * @param groupId The id of the group   * @param teacher The id of the teacher to remove
  */
  public void removeTeacher (Integer groupId, Integer teacher, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = teacher;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling removeTeacher",
        new ApiException(400, "Missing the required parameter 'groupId' when calling removeTeacher"));
    }

    // create path and map variables
    String path = "/group/{groupId}/removeTeacher".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * send a message
  * send a message
   * @param parentId The id of the parent
   * @param message The message to send
   * @return void
  */
  public void sendMessage (Integer parentId, Message message) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = message;
    // verify the required parameter 'parentId' is set
    if (parentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parentId' when calling sendMessage",
        new ApiException(400, "Missing the required parameter 'parentId' when calling sendMessage"));
    }
    // verify the required parameter 'message' is set
    if (message == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'message' when calling sendMessage",
        new ApiException(400, "Missing the required parameter 'message' when calling sendMessage"));
    }

    // create path and map variables
    String path = "/user/{parentId}/sendMessage".replaceAll("\\{" + "parentId" + "\\}", apiInvoker.escapeString(parentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * send a message
   * send a message
   * @param parentId The id of the parent   * @param message The message to send
  */
  public void sendMessage (Integer parentId, Message message, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = message;

    // verify the required parameter 'parentId' is set
    if (parentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parentId' when calling sendMessage",
        new ApiException(400, "Missing the required parameter 'parentId' when calling sendMessage"));
    }
    // verify the required parameter 'message' is set
    if (message == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'message' when calling sendMessage",
        new ApiException(400, "Missing the required parameter 'message' when calling sendMessage"));
    }

    // create path and map variables
    String path = "/user/{parentId}/sendMessage".replaceAll("\\{format\\}","json").replaceAll("\\{" + "parentId" + "\\}", apiInvoker.escapeString(parentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * set a child&#39;s parent
  * set a child&#39;s parent
   * @param childId The id of the child
   * @param parentId The id of the childs parent.
   * @return void
  */
  public void setParent (Integer childId, Integer parentId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = parentId;
    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling setParent",
        new ApiException(400, "Missing the required parameter 'childId' when calling setParent"));
    }
    // verify the required parameter 'parentId' is set
    if (parentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parentId' when calling setParent",
        new ApiException(400, "Missing the required parameter 'parentId' when calling setParent"));
    }

    // create path and map variables
    String path = "/child/{childId}/setParent".replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * set a child&#39;s parent
   * set a child&#39;s parent
   * @param childId The id of the child   * @param parentId The id of the childs parent.
  */
  public void setParent (Integer childId, Integer parentId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = parentId;

    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling setParent",
        new ApiException(400, "Missing the required parameter 'childId' when calling setParent"));
    }
    // verify the required parameter 'parentId' is set
    if (parentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parentId' when calling setParent",
        new ApiException(400, "Missing the required parameter 'parentId' when calling setParent"));
    }

    // create path and map variables
    String path = "/child/{childId}/setParent".replaceAll("\\{format\\}","json").replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * makes a vote
  * makes a vote on a poll inside a post
   * @param groupId The id of the group
   * @param postId The id of the post
   * @param theVoteToSubmit The text of the comment
   * @return void
  */
  public void vote (Integer groupId, Integer postId, Vote theVoteToSubmit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = theVoteToSubmit;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling vote",
        new ApiException(400, "Missing the required parameter 'groupId' when calling vote"));
    }
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling vote",
        new ApiException(400, "Missing the required parameter 'postId' when calling vote"));
    }
    // verify the required parameter 'theVoteToSubmit' is set
    if (theVoteToSubmit == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'theVoteToSubmit' when calling vote",
        new ApiException(400, "Missing the required parameter 'theVoteToSubmit' when calling vote"));
    }

    // create path and map variables
    String path = "/group/{groupId}/post/{postId}/vote".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * makes a vote
   * makes a vote on a poll inside a post
   * @param groupId The id of the group   * @param postId The id of the post   * @param theVoteToSubmit The text of the comment
  */
  public void vote (Integer groupId, Integer postId, Vote theVoteToSubmit, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = theVoteToSubmit;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling vote",
        new ApiException(400, "Missing the required parameter 'groupId' when calling vote"));
    }
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling vote",
        new ApiException(400, "Missing the required parameter 'postId' when calling vote"));
    }
    // verify the required parameter 'theVoteToSubmit' is set
    if (theVoteToSubmit == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'theVoteToSubmit' when calling vote",
        new ApiException(400, "Missing the required parameter 'theVoteToSubmit' when calling vote"));
    }

    // create path and map variables
    String path = "/group/{groupId}/post/{postId}/vote".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
