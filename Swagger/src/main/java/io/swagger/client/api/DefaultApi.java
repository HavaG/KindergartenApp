/**
 * Kindergarten API
 * This is the API for Kindergarten
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@kindergarten.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.Child;
import io.swagger.client.model.Group;
import io.swagger.client.model.KindergartenChild;
import io.swagger.client.model.KindergartenPost;
import io.swagger.client.model.KindergartenUser;
import io.swagger.client.model.Message;
import io.swagger.client.model.Note;
import io.swagger.client.model.Post;
import io.swagger.client.model.Post1;
import io.swagger.client.model.Presence;
import io.swagger.client.model.User;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DefaultApi {
  String basePath = "http://kindergarten.westeurope.cloudapp.azure.com/api/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * adds a child
  * adds a child to the group
   * @param groupId The id of the group
   * @param child The child to create and add
   * @return void
  */
  public void addChildToGroup (Integer groupId, Child child) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = child;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling addChildToGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling addChildToGroup"));
    }
    // verify the required parameter 'child' is set
    if (child == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'child' when calling addChildToGroup",
        new ApiException(400, "Missing the required parameter 'child' when calling addChildToGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}/addChild".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * adds a child
   * adds a child to the group
   * @param groupId The id of the group   * @param child The child to create and add
  */
  public void addChildToGroup (Integer groupId, Child child, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = child;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling addChildToGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling addChildToGroup"));
    }
    // verify the required parameter 'child' is set
    if (child == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'child' when calling addChildToGroup",
        new ApiException(400, "Missing the required parameter 'child' when calling addChildToGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}/addChild".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * adds a note
  * adds a note to the child
   * @param childId The id of the child
   * @param note The text of the note to add
   * @return void
  */
  public void addNoteToChild (Integer childId, String note) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = note;
    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling addNoteToChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling addNoteToChild"));
    }
    // verify the required parameter 'note' is set
    if (note == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'note' when calling addNoteToChild",
        new ApiException(400, "Missing the required parameter 'note' when calling addNoteToChild"));
    }

    // create path and map variables
    String path = "/child/{childId}/addNote".replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * adds a note
   * adds a note to the child
   * @param childId The id of the child   * @param note The text of the note to add
  */
  public void addNoteToChild (Integer childId, String note, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = note;

    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling addNoteToChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling addNoteToChild"));
    }
    // verify the required parameter 'note' is set
    if (note == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'note' when calling addNoteToChild",
        new ApiException(400, "Missing the required parameter 'note' when calling addNoteToChild"));
    }

    // create path and map variables
    String path = "/child/{childId}/addNote".replaceAll("\\{format\\}","json").replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * adds a user
  * adds a user to the group
   * @param groupId The id of the group
   * @param userId The Id of the user to add
   * @return void
  */
  public void addUserToGroup (Integer groupId, Integer userId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = userId;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling addUserToGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling addUserToGroup"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling addUserToGroup",
        new ApiException(400, "Missing the required parameter 'userId' when calling addUserToGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}/addUser".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * adds a user
   * adds a user to the group
   * @param groupId The id of the group   * @param userId The Id of the user to add
  */
  public void addUserToGroup (Integer groupId, Integer userId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = userId;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling addUserToGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling addUserToGroup"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling addUserToGroup",
        new ApiException(400, "Missing the required parameter 'userId' when calling addUserToGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}/addUser".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * makes a comment
  * makes a comment on the post
   * @param postId The id of the post
   * @param comment The text of the comment
   * @return void
  */
  public void commentOnPost (Integer postId, String comment) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = comment;
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling commentOnPost",
        new ApiException(400, "Missing the required parameter 'postId' when calling commentOnPost"));
    }
    // verify the required parameter 'comment' is set
    if (comment == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'comment' when calling commentOnPost",
        new ApiException(400, "Missing the required parameter 'comment' when calling commentOnPost"));
    }

    // create path and map variables
    String path = "/post/{postId}/comment".replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * makes a comment
   * makes a comment on the post
   * @param postId The id of the post   * @param comment The text of the comment
  */
  public void commentOnPost (Integer postId, String comment, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = comment;

    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling commentOnPost",
        new ApiException(400, "Missing the required parameter 'postId' when calling commentOnPost"));
    }
    // verify the required parameter 'comment' is set
    if (comment == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'comment' when calling commentOnPost",
        new ApiException(400, "Missing the required parameter 'comment' when calling commentOnPost"));
    }

    // create path and map variables
    String path = "/post/{postId}/comment".replaceAll("\\{format\\}","json").replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * create a group
  * creates a group
   * @param name The name of the group
   * @return Integer
  */
  public Integer createGroup (String name) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = name;
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling createGroup",
        new ApiException(400, "Missing the required parameter 'name' when calling createGroup"));
    }

    // create path and map variables
    String path = "/createGroup";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * create a group
   * creates a group
   * @param name The name of the group
  */
  public void createGroup (String name, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = name;

    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling createGroup",
        new ApiException(400, "Missing the required parameter 'name' when calling createGroup"));
    }

    // create path and map variables
    String path = "/createGroup".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * create a post
  * create a post inside a group
   * @param groupId The id of the group
   * @param post The post to create
   * @return Integer
  */
  public Integer createPost (Integer groupId, Post post) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = post;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling createPost",
        new ApiException(400, "Missing the required parameter 'groupId' when calling createPost"));
    }

    // create path and map variables
    String path = "/group/{groupId}/createPost".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * create a post
   * create a post inside a group
   * @param groupId The id of the group   * @param post The post to create
  */
  public void createPost (Integer groupId, Post post, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = post;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling createPost",
        new ApiException(400, "Missing the required parameter 'groupId' when calling createPost"));
    }

    // create path and map variables
    String path = "/group/{groupId}/createPost".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * create a user
  * creates a user
   * @param user The user
   * @return Integer
  */
  public Integer createUser (User user) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = user;
    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling createUser",
        new ApiException(400, "Missing the required parameter 'user' when calling createUser"));
    }

    // create path and map variables
    String path = "/createUser";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * create a user
   * creates a user
   * @param user The user
  */
  public void createUser (User user, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = user;

    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling createUser",
        new ApiException(400, "Missing the required parameter 'user' when calling createUser"));
    }

    // create path and map variables
    String path = "/createUser".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * deletes the group
  * deletes the group
   * @param groupId The id of the group
   * @return void
  */
  public void deleteGroup (Integer groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling deleteGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling deleteGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}/deleteGroup".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * deletes the group
   * deletes the group
   * @param groupId The id of the group
  */
  public void deleteGroup (Integer groupId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling deleteGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling deleteGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}/deleteGroup".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * edit a child
  * edit a child
   * @param childId The id of the child
   * @param child The modified Child object
   * @return void
  */
  public void editChild (Integer childId, KindergartenChild child) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = child;
    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling editChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling editChild"));
    }
    // verify the required parameter 'child' is set
    if (child == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'child' when calling editChild",
        new ApiException(400, "Missing the required parameter 'child' when calling editChild"));
    }

    // create path and map variables
    String path = "/child/{childId}/edit".replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * edit a child
   * edit a child
   * @param childId The id of the child   * @param child The modified Child object
  */
  public void editChild (Integer childId, KindergartenChild child, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = child;

    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling editChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling editChild"));
    }
    // verify the required parameter 'child' is set
    if (child == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'child' when calling editChild",
        new ApiException(400, "Missing the required parameter 'child' when calling editChild"));
    }

    // create path and map variables
    String path = "/child/{childId}/edit".replaceAll("\\{format\\}","json").replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * edits the post
  * edites the text of the post
   * @param postId The id of the post
   * @param post The edited post
   * @return void
  */
  public void editPost (Integer postId, Post1 post) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = post;
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling editPost",
        new ApiException(400, "Missing the required parameter 'postId' when calling editPost"));
    }
    // verify the required parameter 'post' is set
    if (post == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'post' when calling editPost",
        new ApiException(400, "Missing the required parameter 'post' when calling editPost"));
    }

    // create path and map variables
    String path = "/post/{postId}/edit".replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * edits the post
   * edites the text of the post
   * @param postId The id of the post   * @param post The edited post
  */
  public void editPost (Integer postId, Post1 post, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = post;

    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling editPost",
        new ApiException(400, "Missing the required parameter 'postId' when calling editPost"));
    }
    // verify the required parameter 'post' is set
    if (post == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'post' when calling editPost",
        new ApiException(400, "Missing the required parameter 'post' when calling editPost"));
    }

    // create path and map variables
    String path = "/post/{postId}/edit".replaceAll("\\{format\\}","json").replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * edit a child&#39;s presence
  * edit a child&#39;s presence
   * @param childId The id of the child
   * @param presence The presence object.
   * @return void
  */
  public void editPresenceOfChild (Integer childId, Presence presence) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = presence;
    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling editPresenceOfChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling editPresenceOfChild"));
    }
    // verify the required parameter 'presence' is set
    if (presence == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'presence' when calling editPresenceOfChild",
        new ApiException(400, "Missing the required parameter 'presence' when calling editPresenceOfChild"));
    }

    // create path and map variables
    String path = "/child/{childId}/editPresence".replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * edit a child&#39;s presence
   * edit a child&#39;s presence
   * @param childId The id of the child   * @param presence The presence object.
  */
  public void editPresenceOfChild (Integer childId, Presence presence, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = presence;

    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling editPresenceOfChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling editPresenceOfChild"));
    }
    // verify the required parameter 'presence' is set
    if (presence == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'presence' when calling editPresenceOfChild",
        new ApiException(400, "Missing the required parameter 'presence' when calling editPresenceOfChild"));
    }

    // create path and map variables
    String path = "/child/{childId}/editPresence".replaceAll("\\{format\\}","json").replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a child
  * Gets a child
   * @param childId The id of the child
   * @return KindergartenChild
  */
  public KindergartenChild getChild (Integer childId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling getChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling getChild"));
    }

    // create path and map variables
    String path = "/child/{childId}".replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (KindergartenChild) ApiInvoker.deserialize(localVarResponse, "", KindergartenChild.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a child
   * Gets a child
   * @param childId The id of the child
  */
  public void getChild (Integer childId, final Response.Listener<KindergartenChild> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling getChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling getChild"));
    }

    // create path and map variables
    String path = "/child/{childId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((KindergartenChild) ApiInvoker.deserialize(localVarResponse,  "", KindergartenChild.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a group
  * Gets a group
   * @param groupId The id of the group
   * @return Group
  */
  public Group getGroup (Integer groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Group) ApiInvoker.deserialize(localVarResponse, "", Group.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a group
   * Gets a group
   * @param groupId The id of the group
  */
  public void getGroup (Integer groupId, final Response.Listener<Group> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Group) ApiInvoker.deserialize(localVarResponse,  "", Group.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * gets the groups
  * gets the groups of the user
   * @return List<Group>
  */
  public List<Group> getGroups () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/getGroups";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Group>) ApiInvoker.deserialize(localVarResponse, "array", Group.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * gets the groups
   * gets the groups of the user

  */
  public void getGroups (final Response.Listener<List<Group>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/getGroups".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Group>) ApiInvoker.deserialize(localVarResponse,  "array", Group.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * get messages
  * get messages from user
   * @param userId The id of the user
   * @return List<Message>
  */
  public List<Message> getMessagesFromUser (Integer userId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling getMessagesFromUser",
        new ApiException(400, "Missing the required parameter 'userId' when calling getMessagesFromUser"));
    }

    // create path and map variables
    String path = "/user/{userId}/getMessages".replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Message>) ApiInvoker.deserialize(localVarResponse, "array", Message.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * get messages
   * get messages from user
   * @param userId The id of the user
  */
  public void getMessagesFromUser (Integer userId, final Response.Listener<List<Message>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling getMessagesFromUser",
        new ApiException(400, "Missing the required parameter 'userId' when calling getMessagesFromUser"));
    }

    // create path and map variables
    String path = "/user/{userId}/getMessages".replaceAll("\\{format\\}","json").replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Message>) ApiInvoker.deserialize(localVarResponse,  "array", Message.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * get all notes
  * get all notes from a child
   * @param childId The id of the child
   * @return List<Note>
  */
  public List<Note> getNotesOfChild (Integer childId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling getNotesOfChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling getNotesOfChild"));
    }

    // create path and map variables
    String path = "/child/{childId}/getNotes".replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Note>) ApiInvoker.deserialize(localVarResponse, "array", Note.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * get all notes
   * get all notes from a child
   * @param childId The id of the child
  */
  public void getNotesOfChild (Integer childId, final Response.Listener<List<Note>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'childId' is set
    if (childId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'childId' when calling getNotesOfChild",
        new ApiException(400, "Missing the required parameter 'childId' when calling getNotesOfChild"));
    }

    // create path and map variables
    String path = "/child/{childId}/getNotes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "childId" + "\\}", apiInvoker.escapeString(childId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Note>) ApiInvoker.deserialize(localVarResponse,  "array", Note.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a post
  * Gets a post of the group
   * @param postId The id of the post
   * @return KindergartenPost
  */
  public KindergartenPost getPost (Integer postId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling getPost",
        new ApiException(400, "Missing the required parameter 'postId' when calling getPost"));
    }

    // create path and map variables
    String path = "/post/{postId}".replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (KindergartenPost) ApiInvoker.deserialize(localVarResponse, "", KindergartenPost.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a post
   * Gets a post of the group
   * @param postId The id of the post
  */
  public void getPost (Integer postId, final Response.Listener<KindergartenPost> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling getPost",
        new ApiException(400, "Missing the required parameter 'postId' when calling getPost"));
    }

    // create path and map variables
    String path = "/post/{postId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((KindergartenPost) ApiInvoker.deserialize(localVarResponse,  "", KindergartenPost.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a user
  * Gets a user by their id
   * @param userId The id of the parent
   * @return KindergartenUser
  */
  public KindergartenUser getUser (Integer userId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling getUser",
        new ApiException(400, "Missing the required parameter 'userId' when calling getUser"));
    }

    // create path and map variables
    String path = "/user/{userId}".replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (KindergartenUser) ApiInvoker.deserialize(localVarResponse, "", KindergartenUser.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a user
   * Gets a user by their id
   * @param userId The id of the parent
  */
  public void getUser (Integer userId, final Response.Listener<KindergartenUser> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling getUser",
        new ApiException(400, "Missing the required parameter 'userId' when calling getUser"));
    }

    // create path and map variables
    String path = "/user/{userId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((KindergartenUser) ApiInvoker.deserialize(localVarResponse,  "", KindergartenUser.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * makes a like
  * makes or removes a like on the post
   * @param postId The id of the post
   * @return Boolean
  */
  public Boolean likePost (Integer postId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling likePost",
        new ApiException(400, "Missing the required parameter 'postId' when calling likePost"));
    }

    // create path and map variables
    String path = "/post/{postId}/like".replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Boolean) ApiInvoker.deserialize(localVarResponse, "", Boolean.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * makes a like
   * makes or removes a like on the post
   * @param postId The id of the post
  */
  public void likePost (Integer postId, final Response.Listener<Boolean> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling likePost",
        new ApiException(400, "Missing the required parameter 'postId' when calling likePost"));
    }

    // create path and map variables
    String path = "/post/{postId}/like".replaceAll("\\{format\\}","json").replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Boolean) ApiInvoker.deserialize(localVarResponse,  "", Boolean.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * removes a child
  * removes a child from the group
   * @param groupId The id of the group
   * @param childId The id of the child to remove from the gorup
   * @return void
  */
  public void removeChildFromGroup (Integer groupId, Integer childId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = childId;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling removeChildFromGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling removeChildFromGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}/removeChild".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * removes a child
   * removes a child from the group
   * @param groupId The id of the group   * @param childId The id of the child to remove from the gorup
  */
  public void removeChildFromGroup (Integer groupId, Integer childId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = childId;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling removeChildFromGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling removeChildFromGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}/removeChild".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * removes a user
  * removes a user from the group
   * @param groupId The id of the group
   * @param userId The id of the user to remove
   * @return void
  */
  public void removeUserFromGroup (Integer groupId, Integer userId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = userId;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling removeUserFromGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling removeUserFromGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}/removeUser".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * removes a user
   * removes a user from the group
   * @param groupId The id of the group   * @param userId The id of the user to remove
  */
  public void removeUserFromGroup (Integer groupId, Integer userId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = userId;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling removeUserFromGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling removeUserFromGroup"));
    }

    // create path and map variables
    String path = "/group/{groupId}/removeUser".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * send a message
  * Send a message to a user
   * @param userId The id of the user
   * @param message The message to send
   * @return void
  */
  public void sendMessageToUser (Integer userId, String message) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = message;
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling sendMessageToUser",
        new ApiException(400, "Missing the required parameter 'userId' when calling sendMessageToUser"));
    }
    // verify the required parameter 'message' is set
    if (message == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'message' when calling sendMessageToUser",
        new ApiException(400, "Missing the required parameter 'message' when calling sendMessageToUser"));
    }

    // create path and map variables
    String path = "/user/{userId}/sendMessage".replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * send a message
   * Send a message to a user
   * @param userId The id of the user   * @param message The message to send
  */
  public void sendMessageToUser (Integer userId, String message, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = message;

    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling sendMessageToUser",
        new ApiException(400, "Missing the required parameter 'userId' when calling sendMessageToUser"));
    }
    // verify the required parameter 'message' is set
    if (message == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'message' when calling sendMessageToUser",
        new ApiException(400, "Missing the required parameter 'message' when calling sendMessageToUser"));
    }

    // create path and map variables
    String path = "/user/{userId}/sendMessage".replaceAll("\\{format\\}","json").replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * makes a vote
  * makes a vote on a poll inside a post
   * @param postId The id of the post
   * @param option The vote to submit
   * @return void
  */
  public void vote (Integer postId, Integer option) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = option;
    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling vote",
        new ApiException(400, "Missing the required parameter 'postId' when calling vote"));
    }
    // verify the required parameter 'option' is set
    if (option == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'option' when calling vote",
        new ApiException(400, "Missing the required parameter 'option' when calling vote"));
    }

    // create path and map variables
    String path = "/post/{postId}/vote".replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * makes a vote
   * makes a vote on a poll inside a post
   * @param postId The id of the post   * @param option The vote to submit
  */
  public void vote (Integer postId, Integer option, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = option;

    // verify the required parameter 'postId' is set
    if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling vote",
        new ApiException(400, "Missing the required parameter 'postId' when calling vote"));
    }
    // verify the required parameter 'option' is set
    if (option == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'option' when calling vote",
        new ApiException(400, "Missing the required parameter 'option' when calling vote"));
    }

    // create path and map variables
    String path = "/post/{postId}/vote".replaceAll("\\{format\\}","json").replaceAll("\\{" + "postId" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OauthSecurity" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
